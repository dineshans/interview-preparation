============== Java quetions  ================
1) @Primary & @Qualifier difference
2) Difference between findAny() & findAnyMatch()
3) Difference between filter & intercepter



ditrubuted locking in microservices
Transaction propogation & Isolation
Symentric and Asymentric 
Prototype and RequerstScop bean
Can we use prototype scope in singleton scop in spring
0 downtime deployment


============ Problems ===============
-------------- String -----------------
1) Given 3 string s1 = "hello dinesh"
           string s2 = "hello dinesh ok"
           string s3 = "hello dinesh not"

           Find the common wsords in all 3-string

Solution:

     Map<String, Integer> map1 = getWordCount(s1.toLowerCase());
        Map<String, Integer> map2 = getWordCount(s2.toLowerCase());
        Map<String, Integer> map3 = getWordCount(s3.toLowerCase());

        Set<String> commonWords = new HashSet<>(map1.keySet());
        commonWords.retainAll(map2.keySet());
        commonWords.retainAll(map3.keySet());

        for (String word : commonWords) {
            int minCount = Math.min(map1.get(word), Math.min(map2.get(word), map3.get(word)));
            for (int i = 0; i < minCount; i++) {
                System.out.println(word);
            }
        }
    }

    private static Map<String, Integer> getWordCount(String str) {
        Map<String, Integer> map = new HashMap<>();
        for (String word : str.trim().split("\\s+")) {
            map.put(word, map.getOrDefault(word, 0) + 1);
        }
        return map;
    }



2) Given a String find highest occurence character 

Solution:

   String s = "dineshsahusss";
        //return character coming highest no of times
        Map<Character, Integer> map = new LinkedHashMap<>();
        char[] ch = s.toCharArray();
        for (int i = 0; i < ch.length; i++) {
            if (!map.containsKey(ch[i])) {
                map.put(ch[i], 1);
            } else {
                map.put(ch[i], map.get(ch[i])+1);
            }
        }

        int max = Integer.MIN_VALUE;
        //Character ch1 = '';
        for (int i = 0; i < ch.length; i++) {
            int result = map.get(ch[i]);
            if (result > max) {
                max = map.get(ch[i]);
            }
        }

------------- DS & Algo Problems ------------
1) Group of Anagram
2) sort the arrays ciontains 0,1,2


------------ jdk- 8 proiblems ----------
1) find max salary based on the department 
2) find min salary based on the department
3) Find average salary based on Gender
4) given a list, find cube of even numbers 
5) String[] strArr = {"Pen", "Eraser", "Note Book", "Pen", "Pencil", "Pen", "Note Book", "Pencil"}; need to epn which occures 3 times using jdk 8


------------ SQL Queries --------------
1) find third highest salary 
2) find sum of salary based on department 

-- count employee based on department
SELECT department, count(department) FROM Employees group by department;

-- get average salary per department 
SELECT department, avg(salary) from employees group by department;

-- highest and lowest salary perdepartment
SELECT department, max(salary), min(salary) from employees group by department;

-- sum of salary in each department
SELECT department, sum(salary) from employees group by department;

-- order department by highest average salary
select department, AVG(Salary)AS avrg_salary from employees 
group by department
ORDER BY avrg_salary DESC;

-- find department with maximum no of employee
SELECT department, count(*) AS totalCount from employees
group By department
ORDER BY totalCount DESC limit 1;

-- find department with more then 3 employee
-- also add average salary more then 57000
SELECT department, avg(salary) AS average_salary, count(*) AS total_count from employees
group by department HAVING total_count > 2 AND average_salary > 55000;

-- find nth highest salary - 3rd highest then use 3 - using innner query
select max(salary) from employees where salary < (select max(salary) from employees where salary < (select max(salary) from employees));

-- using limit clause
select DISTINCT(salary) from employees order by salary DESC limit 2,1;



================= Design problems ================
1) Design Dashboard

2) Design Banking application with below funtion implementation:
	1) Core Banking APp
	2) Accouint creation
	3) Deposites
	4) Withdrawals
	5) amount transfer to external bank


1) AccountComponent
API Layer / Controller  --> AccountController
Service Layer    --> AccountService & AccountServiceImpl
Domain Layer    -->   Account, AccountType
Persistence Layer --> Account Repository extends JpaRepository
Database
    --> MySQL / Oracle 
		1)  accounts table
				id, account_number, account_holder_name, account_type, balance, created_at, updated_at
		2) transaction table (deposites, withdrawal, trasnfer logs)
			id, transaction_type, acount, timestamp
			from_account_id
			to_account_id

			foreign --> from_account_id reference account(id)
			foreign key --> to_account_id reference account(id)
		3) Users 
			id, username,password_hash, email, role

2) TransactionComponenet
Controller  --> TransactionController
Service Layer    --> TransactionService & TransactionServiceImpl
Domain Layer    -->   Transaction, Transaction
Persistence Layer --> TransactionRepository extends JpaRepository

3) DTO -->
	createAccountRequest, DepositeRequest
	WithdrawalaRequest, TransferRequest
	AccountResponse, TransactionResponse
4) MapperLayer
		AccountMapper, TransactionMapper
Deposite:
Client --> TransactionCotroller --> TransactionService --> validate account using AccountService --> updateBalance --> save transaction in DB
Withdrawal --> 
	Client --> TransactionCotroller --> TransactionService --> validate both account --> withdrawal from sender --> payment gateway -->  despoite into receiver --> log as transfer transaction

@Transaction --> TransactionServiceImp

Notificatio
Audit logs
API Security --> JWT / OAuth2.0
Scheduler --> 

